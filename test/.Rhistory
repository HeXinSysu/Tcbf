x <- seq(1, range(ds)[2], by=1000)
y <- jitter(seq(100, 300, length=length(x)), amount=50)
seg_plot(func=linesGrob, args=list(x=x, y=y, gp=gpar(col=grey(0.3), lty=2)))
})
plot_gene_map(barto$dna_segs, barto$comparisons, tree=tree,
annotations=annots,
seg_plots=seg_plots,
seg_plot_height=1.5,
seg_plot_height_unit="null",
seg_plot_yaxis=2,
seg_plot_yaxis_cex=0.8,
xlims=xlims2,
dna_seg_scale=TRUE,
main="Random data on multi-segment plot, 4 Bartonella genomes")
plot_gene_map(barto$dna_segs, barto$comparisons, tree=tree,
annotations=annots,
seg_plots=seg_plots,
seg_plot_height=1.5,
seg_plot_height_unit="null",
seg_plot_yaxis=2,
seg_plot_yaxis_cex=0.8,
xlims=xlims2,
dna_seg_scale=TRUE,
main="Random data on multi-segment plot, 4 Bartonella genomes")
barto
barto$dna_segs
head(barto$dna_segs)
seg_plots
?readSim()
library(ggplot2)
readSim
#readSim: read simulation data
readSim <- function(file = NULL){
DATA=read.table(file,sep="\t",header=T)
d1=summarySE(data = DATA,measurevar ="Pan",groupvars = "Time")
d1$Ave = d1$Pan
colnames(d1)[3] = "class"
d1$class = "pan"
d2=summarySE(data = DATA,measurevar ="Core",groupvars = "Time")
d2$Ave = d2$Core
colnames(d2)[3] = "class"
d2$class = "core"
d = rbind(d1,d2)
return(d)
}
library(plyr)
?qt
0.95 / 2 + .5
qt(0.975,100)
library(ggmsa)
protein_sequences <- system.file("extdata", "sample.fasta", package = "ggmsa")
miRNA_sequences <- system.file("extdata", "seedSample.fa", package = "ggmsa")
nt_sequences <- system.file("extdata", "LeaderRepeat_All.fa", package = "ggmsa")
ggmsa(protein_sequences, 300, 350, color = "Clustal", font = "DroidSansMono", char_width = 0.5, seq_name = TRUE )
protein_sequences
library(ggmsa)
protein_sequences <- system.file("extdata", "sample.fasta", package = "ggmsa")
ggmsa(protein_sequences,
300, 350, color = "Clustal",
font = "DroidSansMono", char_width = 0.5, seq_name = TRUE )
protein_sequences
protein_sequences
library(Biostrings)
DNAStringSet(x = "ATCGATCAGT")
DNAStringSet(x = c("ATCGATCAGT","CACACAGTCAGCTAGCTA"))
p1 <- "MSKVVYEGWMVRYGRRKIGRSFIHMRYFVLENRLLAYYKRKPQDTQVPIKTMLIDGNCRV
EDRGLKTHHGHMVYVLSVYNKKEKYHRITMAAFNIQEALMWKEKIESVIDKHQESQVANG
NKYVSFEYKSGMDNGRTASSSDHESQFSAQEDEDDAPPDLLRRTTIGNGPPDSIFDWTQD
FDSELSNQNANNQAFSRKHWRLLQCQNGLRIFEELLEVDYLPRSCSRAMKAVGVVEATCE
EIFGLVMSMDGTRFEWDCSFQYGSLVEEVDGHTAILYHRLQLDWFPVFVWPRDLCYVRYW
RRNDDGSYVVLFRSREHENCGPQPGHVRAHVESGGFNISPMKSRNGKPRTQVQHLMQIDL
KGWGVGYISSFQQHCLLQMLNSVAGLREWFAQTDERIATPRIPVMVNMASSSVSSKKTQR
MFELSVPSAPSLDQTNAANRNSVLMDEYSDEDEEQMPEAEQEAYPTKSDNDFKRTALEEE
PIEKIDLSCFSGNLRRDDRDNSRNCWTISDGNNFRVRSQHFCYNKTKIPAGKHLMDLVAV
DWFKDTKRMDHVVRRQGCAAQIASQMGLFSLVFNVQVPGSTHYSMVFYFVTKELVPGSLL
HRFVDGDDEFRNSRLKLIPSVPKGSWIVRQSVGSTPCLLGKAVDCNYIRGPKYLEVDIDI
GSSTVANGVLGLVIGVITTLVVDMAFLVQANTTDELPERLIGAVRVSHIELSSAIVPKLD
TDPS"
p2 <- "MSKVVYEGWMVRYGRRKIGRSFIHMRYFVLENRLLAYYKRKPQDTQVPIKTMLIDGNCRV
EDRGLKTHHGHMVYVLSVYNKKEKYHRITMAAFNIQEALMWKEKIESVIDKHQESQVANG
NKYVSFEYKSGMDNGRTASSSDHESQFSAQEDEDDAPPDLLRRTTIGNGPPDSIFDWTQD
FDSELSNKNANNQAFSRKHWRLLQCQNGLRIFEELLEVDYLPRSCSRAMKAVGVVEATCE
EIFGLVMSMDGTRFEWDCSFQYGSLVEEVDGHTAILYHRLQLDWFPVFVWPRDLCYVRYW
RRNDDGSYVVLFRSREHENCGPQPGHVRAHVESGGFNISPMKSRNGKPRTQVQHLMQIDL
KGWGVGYISSFQQHCLLQMLNSVAGLREWFAQTDERIATPRIPVMVNMASSSVSSKKTQR
MFELSVPSAPSLDQTNAANRNSVLMDEYSDEDEEQMPETEQEAYPTKSDNDFKRTALEEE
PIEKIDLSCFSGNLRRDDRDNSRNCWTISDGNNFRVRSQHFCYNKTKIPAGKHLMDLVAV
DWFKDTKRMDHVVRRQGCAAQIASQMGLFSLVFNVQVPGSTHYSMVFYFVTKELVPGSLL
HRFVDGDDEFRNSRLKLIPSVPKGSWIVRQSVGSTPCLLGKAVDCNYIRGPKYLEVDIDI
GSSTVANGVLGLVIGVITTLVVDMAFLVQANTTDELPERLIGAVRVSHIELSSAIVSKLD
TDPS"
library(Biostrings)
DNAStringSet(x = c(p1,p2))
p1
sub('\n','',p1)
sub('\\n','',p1)
sub('\\n','',p1)
sub('\n','',p1)
library(stringr)
str_replace(p1,'\n','')
str_replace_all(p1,'\n','')
p1 <- str_replace_all(p1,'\n','')
p2 <- str_replace_all(p2,'\n','')
DNAStringSet(x = c(p1,p2))
DNAStringSet(x = p1)
p1
DNAStringSet(x = "MSKVVYEGWMVRYGR")
AAStringSet(x = "MSKVVYEGWMVRYGR")
AAStringSet(x = c(p1,p2))
S <- AAStringSet(x = c(p1,p2))
ggmsa(S,
300, 350, color = "Clustal",
font = "DroidSansMono", char_width = 0.5, seq_name = TRUE )
S
names(s)
names(S)
names(S) <- c("p1","p2")
ggmsa(S,
300, 350, color = "Clustal",
font = "DroidSansMono", char_width = 0.5, seq_name = TRUE )
length(p1)
ggmsa(S,
0, 350, color = "Clustal",
font = "DroidSansMono", char_width = 0.5, seq_name = TRUE )
ggmsa(S,
250, 350, color = "Clustal",
font = "DroidSansMono", char_width = 0.5, seq_name = TRUE )
remove(list = ls())
gc()
library(gggenomes)
devtools::install_github("dzhang32/ggtranscript")
library(gggenomes)
emale_genes
gggenomes(genes = emale_genes) +
geom_gene() +
geom_seq()
emale_genes
?read_tsv
library(readr)
?read_tsv
iris |>
as_tibble()
library(tidyverse)
iris |>
as_tibble()
iris |>
as_tibble() |>
mutate(Sepal.Length = if_else(Sepal.Length >= 3,3,Sepal.Length))
library(tidyverse)
iris |>
as_tibble()
iris |>
as_tibble() |>
ggplot(aes(x = Sepal.Length,y =Sepal.Width )) +
geom_point()
ggThemeAssist:::ggThemeAssistAddin()
iris |>
as_tibble() |>
ggplot(aes(x = Sepal.Length,y =Sepal.Width )) +
geom_point() +
theme(axis.text.x = element_text(size = 5),
axis.text.y = element_text(size = 3))
iris |>
as_tibble() |>
ggplot(aes(x = Sepal.Length,y =Sepal.Width )) +
geom_point() +
theme(axis.text.x = element_text(size = 5,
angle = 90),
axis.text.y = element_text(size = 3))
iris |>
as_tibble() |>
ggplot(aes(x = Sepal.Length,y =Sepal.Width )) +
geom_point() +
theme(axis.text.x = element_text(size = 15,
angle = 90),
axis.text.y = element_text(size = 13))
ggThemeAssist:::ggThemeAssistAddin()
?read_tsv
ggThemeAssist:::ggThemeAssistAddin()
+ theme(axis.text.y = element_text(family = "URWTimes"))
iris |>
as_tibble() |>
ggplot(aes(x = Sepal.Length,y =Sepal.Width )) +
geom_point() +
theme(axis.text.x = element_text(size = 15,
angle = 90),
axis.text.y = element_text(size = 13)) +
theme(axis.text.y = element_text(family = "URWTimes"))
if(! require(BiocManager))
install.packages("BiocManager")
BiocManager::install(c("Biostrings", "GenomicRanges", "muscle", "IRanges", "rtracklayer", "trackViewer"))
install.packages("geneHapR")
devtools::install_git("https://gitee.com/zhangrenl/genehapr")
devtools::install_github("zhangrenl/quickHapr")
devtools::install_github("zhangrenl/quickHapr")
install(c("ggpubr", "vcfR", "tidyverse", "stringr", "resHape2", "randomcoloR",
"rtracklayer", "trackViewer", "GenomicRanges", "IRanges"))
install.packages("C:/Users/xinh/Desktop/quickhapr.tar.gz", repos = NULL, type = "source")
library(quickHapR)
data("quickHap_test")
hap <- get_hap(vcf, hyb_remove = TRUE, na.drop = TRUE)
hapVsPheno(hap = hap,pheno = pheno, phenoName = "GrainWeight.2021",minAcc = 3)
library(quickHapR)
data("quickHap_test")
hap <- get_hap(vcf, hyb_remove = TRUE, na.drop = TRUE)
vcf
devtools::install_github("zhangrenl/quickHapr")
library(gggenomes)
s0 <- tibble(
seq_id = c("a", "b"),
length = c(600, 550)
)
# a minimal gene track
g0 <- tibble(
seq_id = c("a", "a", "b"),
start = c(50, 350, 80),
end = c(250, 500, 450)
)
# a simple link track
l0 <- tibble(
seq_id = c("a", "a"),
start = c(50, 400),
end = c(250, 480),
seq_id2 = c("b", "b"),
start2 = c(80, 350),
end2 = c(300, 430)
)
p <- gggenomes(genes=g0, seqs=s0, links=l0)
p +
geom_seq() +         # draw contig/chromosome lines
geom_seq_label() +   # label each sequence
geom_gene() +        # draw genes as arrow
geom_link()
# a simple link track
l0 <- tibble(
seq_id = c("a", "a"),
start = c(50, 400),
end = c(250, 480),
seq_id2 = c("b", "b"),
start2 = c(80, 350),
end2 = c(300, 430)
)
p <- gggenomes(genes=g0, seqs=s0, links=l0)
g0
s0
l0
p <- gggenomes(genes = g0, seqs = s0, links = l0)
p <- gggenomes(seqs = s0,genes = g0,  links = l0)
p <- gggenomes(s0,g0, l0)
?gggenomes
p <- gggenomes(g0,s0, links = l0)
data(package="gggenomes")
gggenomes(emale_genes, emale_seqs, emale_tirs, emale_ava) %>%
add_feats(ngaros=emale_ngaros, gc=emale_gc) %>%
add_sublinks(emale_prot_ava) %>%
flip_by_links() +
geom_feat(position="identity", size=6) +
geom_seq() +
geom_link(data=links(2)) +
geom_bin_label() +
geom_gene(aes(fill=name)) +
geom_gene_tag(aes(label=name), nudge_y=0.1, check_overlap = TRUE) +
geom_feat(data=feats(ngaros), alpha=.3, size=10, position="identity") +
geom_feat_note(aes(label="Ngaro-transposon"), feats(ngaros),
nudge_y=.1, vjust=0) +
geom_ribbon(aes(x=(x+xend)/2, ymax=y+.24, ymin=y+.38-(.4*score),
group=seq_id, linetype="GC-content"), feats(gc),
fill="lavenderblush4", position=position_nudge(y=-.1)) +
scale_fill_brewer("Genes", palette="Dark2", na.value="cornsilk3")
remove(list = ls())
gc()
library(gggenomes)
data(package="gggenomes")
gggenomes(emale_genes, emale_seqs, emale_tirs, emale_ava) %>%
add_feats(ngaros=emale_ngaros, gc=emale_gc) %>%
add_sublinks(emale_prot_ava) %>%
flip_by_links() +
geom_feat(position="identity", size=6) +
geom_seq() +
geom_link(data=links(2)) +
geom_bin_label() +
geom_gene(aes(fill=name)) +
geom_gene_tag(aes(label=name), nudge_y=0.1, check_overlap = TRUE) +
geom_feat(data=feats(ngaros), alpha=.3, size=10, position="identity") +
geom_feat_note(aes(label="Ngaro-transposon"), feats(ngaros),
nudge_y=.1, vjust=0) +
geom_ribbon(aes(x=(x+xend)/2, ymax=y+.24, ymin=y+.38-(.4*score),
group=seq_id, linetype="GC-content"), feats(gc),
fill="lavenderblush4", position=position_nudge(y=-.1)) +
scale_fill_brewer("Genes", palette="Dark2", na.value="cornsilk3")
library(gggenomes)
data(package="gggenomes")
gggenomes(emale_genes, emale_seqs, emale_tirs, emale_ava) %>%
add_feats(ngaros=emale_ngaros, gc=emale_gc) %>%
add_sublinks(emale_prot_ava) %>%
flip_by_links() +
geom_feat(position="identity", size=6) +
geom_seq() +
geom_link(data=links(2)) +
geom_bin_label() +
geom_gene(aes(fill=name)) +
geom_gene_tag(aes(label=name), nudge_y=0.1, check_overlap = TRUE) +
geom_feat(data=feats(ngaros), alpha=.3, size=10, position="identity") +
geom_feat_note(aes(label="Ngaro-transposon"), feats(ngaros),
nudge_y=.1, vjust=0) +
geom_ribbon(aes(x=(x+xend)/2, ymax=y+.24, ymin=y+.38-(.4*score),
group=seq_id, linetype="GC-content"), feats(gc),
fill="lavenderblush4", position=position_nudge(y=-.1)) +
scale_fill_brewer("Genes", palette="Dark2", na.value="cornsilk3")
gggenomes(emale_genes, emale_seqs, emale_tirs, emale_ava) %>%
add_feats(ngaros=emale_ngaros, gc=emale_gc) %>%
add_sublinks(emale_prot_ava) %>%
flip_by_links() +
geom_feat(position="identity", size=6) +
geom_seq()
devtools::install_github("thackl/gggenomes")
gggenomes(emale_genes, emale_seqs, emale_tirs, emale_ava) %>%
add_feats(ngaros=emale_ngaros, gc=emale_gc) %>%
add_sublinks(emale_prot_ava) %>%
flip_by_links() +
geom_feat(position="identity", size=6) +
geom_seq()
rlang::last_error()
library(tidyverse)
s0 <- tibble(
seq_id = c("a", "b"),
length = c(600, 550)
)
# a minimal gene track
g0 <- tibble(
seq_id = c("a", "a", "b"),
start = c(50, 350, 80),
end = c(250, 500, 450)
)
# a simple link track
l0 <- tibble(
seq_id = c("a", "a"),
start = c(50, 400),
end = c(250, 480),
seq_id2 = c("b", "b"),
start2 = c(80, 350),
end2 = c(300, 430)
)
g0
?gggenomes
p <- gggenomes(g0,s0, links = l0)
p +
geom_seq() +         # draw contig/chromosome lines
geom_seq_label() +   # label each sequence
geom_gene() +        # draw genes as arrow
geom_link()
gggenomes(g0,s0, links = l0)+
geom_seq() +         # draw contig/chromosome lines
geom_seq_label() +   # label each sequence
geom_gene() +        # draw genes as arrow
geom_link()
set.seed(100)
df <- data.frame(start = 1:10,
width = 5,
gc = runif(10),
cat = sample(letters[1:2], 10, replace = TRUE))
library(GenomicRanges)
set.seed(100)
df <- data.frame(start = 1:10,
width = 5,
gc = runif(10),
cat = sample(letters[1:2], 10, replace = TRUE))
rng <- as_iranges(df)
df
?reduce_rangBiocManager::install("plyranges")
BiocManager::install("plyranges")
library("plyranges")
set.seed(10)
df <- data.frame(start = sample(1:10),
width = 5,
seqnames = "seq1",
strand = sample(c("+", "-", "*"), 10, replace = TRUE),
gc = runif(10))
rng <- as_granges(df)
rng
rng %>% reduce_ranges()
rng %>% reduce_ranges(gc = mean(gc))
rng %>% reduce_ranges_directed(gc = mean(gc))
rng
rng %>% reduce_ranges_directed(gc = mean(gc))
x <- data.frame(start = c(11:13, 2, 7:6),
width=3,
id=sample(letters[1:3], 6, replace = TRUE),
score= sample(1:6))
x <- as_iranges(x)
x
x %>% reduce_ranges(score = sum(score))
x
x %>% group_by(id) %>% reduce_ranges()
x
library(plyranges)
df
df
rng
query <- data.frame(start = c(5,10, 15,20), width = 5, gc = runif(4)) %>%
as_iranges()
subject <- data.frame(start = 2:6, width = 3:7, label = letters[1:5]) %>%
as_iranges()
query
subject
find_overlaps(query, subject)
find_overlaps(query, subject)
query
subject
find_overlaps(query, subject)
x <- sort(stats::rnorm(5))
y <- sort(stats::rnorm(5))
plot(x, y, pch = 19)
res <- xspline(x, y, 1, draw = FALSE)
res
res$x
line(res)
x <- sort(stats::rnorm(5))
y <- sort(stats::rnorm(5))
plot(x, y, pch = 19)
res <- xspline(x, y, 1, draw = FALSE)
lines(res)
?xspline
length(x)
length(res)
length(res$x)
res <- xspline(x, y, 0, draw = FALSE)
lines(res)
res <- xspline(x, y, 1, draw = FALSE)
lines(res)
xsplineTest <- function(s, open = TRUE,
x = c(1,1,3,3)/4,
y = c(1,3,3,1)/4, ...) {
plot(c(0,1), c(0,1), type = "n", axes = FALSE, xlab = "", ylab = "")
points(x, y, pch = 19)
xspline(x, y, s, open, ...)
text(x+0.05*c(-1,-1,1,1), y+0.05*c(-1,1,1,-1), s)
}
op <- par(mfrow = c(3,3), mar = rep(0,4), oma = c(0,0,2,0))
xsplineTest(c(0, -1, -1, 0))
xsplineTest(c(0, -1,  0, 0))
xsplineTest(c(0, -1,  1, 0))
xsplineTest(c(0,  0, -1, 0))
xsplineTest(c(0,  0,  0, 0))
xsplineTest(c(0,  0,  1, 0))
xsplineTest(c(0,  1, -1, 0))
xsplineTest(c(0,  1,  0, 0))
xsplineTest(c(0,  1,  1, 0))
?xspline
x <- sort(stats::rnorm(5))
y <- sort(stats::rnorm(5))
plot(x, y, pch = 19)
x <- sort(stats::rnorm(5))
y <- sort(stats::rnorm(5))
plot(x, y, pch = 19)
seq(-0.2,0.2,0.01)
res <- xspline(x, y, seq(-0.2,0.2,0.01), draw = FALSE)
res
res$x
res <- xspline(x, y, -0.25, draw = FALSE)
res$x
length(res$x)
res <- xspline(x, y, 1, draw = FALSE)
length(res$x)
res <- xspline(x, y, 1, draw = FALSE)
length(res$x)
x
length(res$x)
res <- xspline(x, y, 1, draw = FALSE)
length(res$x)
x
res <- xspline(x, y, 0.9, draw = FALSE)
length(res$x)
x
?plot
res <- xspline(x, y, 0.9, draw = FALSE)
length(res$x)
res <- xspline(x, y, 1, draw = FALSE)
res <- xspline(x, y, 1, draw = FALSE)
length(res$x)
res <- xspline(x, y, 2, draw = FALSE)
length(res$x)
x
res$x
x <- 1:5
y <- sort(stats::rnorm(5))
plot(x, y, pch = 19)
res <- xspline(x, y, 2, draw = FALSE)
plot(res)
grid.newpage()
xspline(x,y)
xspline(x,y)
y <- 5:10
xspline(x,y)
y <- 5:9
xspline(x,y)
plot(x,y)
xspline(x,y)
xspline(x,y,draw = F)
res <- xspline(x,y,draw = F)
res
getwd()
setwd("D:/TAD_src/test/")
library(tidyverse)
data <- read_tsv("TAD_groups_count.tsv")
data
data <- fread("TAD_groups_count.tsv")
library(data.table)
data <- fread("TAD_groups_count.tsv")
data
data[data != 0]
data != 0
