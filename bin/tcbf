#!/usr/bin/env python3
import click
from itertools import permutations
from tcbf.extract_TAD_bound import extract_TAD_boundary, parse_gff
from tcbf.process_alignment import align_genome
from tcbf.network_construct import network_construct
from tcbf.check_depend import Check_dependencies
from tcbf.circos import plot_circos
from tcbf.run_command import parall_run
# from test.visualization.plot_tad_structure import plot_synteny
import warnings

warnings.filterwarnings("ignore")
CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])


@click.group(context_settings=CONTEXT_SETTINGS)
def tcbf():
    Check_dependencies()


@tcbf.command()
@click.option("-c", '--config', type=click.Path(exists=True), help="Config file ", required=True)
@click.option('-o', "--output", type=str, help="output dir", required=True)
@click.option('-p', "--processor", type=int, default=0, help="align threads number ", required=False)
@click.option('-d', "--distance", type=int, default=100e+3, help="TAD boundary range", required=False)
@click.option("-aligner", type=click.Choice(["minimap2"]), default="minimap2",
              required=False)
@click.option("--maxgap", type=int, default=40000)
@click.option('--only_print_command', default=False, required=False, help="only print split subcommand", is_flag=True)
@click.option("-minimaplength", type=int, default=2000)
def run(config, output, processor, distance, aligner, maxgap,
        only_print_command,minimaplength):
    workdir = output
    all_species = []
    if only_print_command:
        print("### Step1")

    with open(config) as f:
        commands = []
        for line in f:
            if line.startswith("#") or not line:
                continue
            value = line.split()
            genome_file, TAD_file, species_name,gff = value
            all_species.append(species_name)
            command = f"tcbf first-extract-boundary -t {TAD_file} -g {genome_file} -d {distance} -p " \
                      f"{species_name} -o" \
                      f" {workdir} -gff {gff}"
            commands.append(command)
        if only_print_command:
            print("\n".join(commands))
        else:
            parall_run(commands)
    print("### Step2")
    for s1, s2 in permutations(all_species, 2):
        if only_print_command:
            command = f"tcbf second-process-alignment -q {s1} -t {s2} -o {workdir} --threads {processor} " \
                      f"-aligner minimap2 -maxgap {maxgap}"
            print(command)
        else:
            align_genome(s1, s2, workdir, processor, aligner, maxgap,minimap_length=minimaplength)
    if only_print_command:
        print("### Step3")
        command3 = f"tcbf  third-construct-tad-network -o {workdir}"
        print(command3)
    else:
        network_construct(workdir, True)


@tcbf.command()
@click.option("-t", '--TAD', type=click.Path(exists=True), help="TAD file ", required=True)
@click.option("-g", '--genome', type=click.Path(exists=True), help="genome sequence file  ", required=True)
@click.option('-d', "--distance", type=int, default=40000, required=False)
@click.option('-p', "--prefix", type=str, default=None, help="species prefix", required=True)
@click.option('-o', "--output", type=str, default='.', help="output dir", required=False)
@click.option("--gff", required=True, help="gff gene annotation file")
@click.option("--skip-mash", type=bool, default=False, help="skip calculate mash dist", required=False, is_flag=True)
def first_extract_boundary(tad: str,
                           genome: str,
                           distance: int,
                           prefix: str,
                           output: str,
                           gff,
                           skip_mash):
    parse_gff(output, gff, prefix,tad)
    extract_TAD_boundary(tad, genome, distance, prefix, output, skip_mash)



from tcbf.pep_synteny import align_gene


# @tcbf.command()
# @click.option("-q", '--query', required=True)
# @click.option("-t", '--target', required=True)
# @click.option('-o', "--output", type=str, help="output dir", required=True)
# @click.option("--maxgap", type=int, default=40000)
# def run_pep_syn(query, target, output, maxgap):
#     align_gene(output,query,target,maxgap=maxgap)
@tcbf.command()
@click.option("-q", '--query', required=True)
@click.option("-t", '--target', required=True)
@click.option('-o', "--output", type=str, help="output dir", required=True)
@click.option("--threads", type=int, help="threads number", required=False, default=0)
@click.option("-aligner", type=click.Choice(["minimap2", "lastz", "blat", "GSAlign"]), default="minimap2")
@click.option("-maxgap", type=int, default=40000)
@click.option("-minimaplength", type=int, default=2000)
def second_process_alignment(query, target, output, threads, aligner, maxgap,minimaplength):
    align_gene(output, query, target, maxgap)
    align_genome(query, target, output, threads, aligner, maxgap,minimap_length = minimaplength)



@tcbf.command()
@click.option('-o', "--output", type=str, help="outputdir", required=True)
@click.option('--syn', default=False, required=False, help="filter TAD boundary synteny ", is_flag=True)
def third_construct_TAD_network(output, syn):
    network_construct(output, need_syn=syn)


# @tcbf.command()
# @click.option('-o', "--output", type=str, help="输出文件的目录", required=True)
# @click.option("--boundary", multiple=True, required=True)
# @click.option("--plot", required=True)
# def plot_syn(output, boundary, plot):
#     plot_synteny(output, boundary, plot)


@tcbf.command()
@click.option('-o', "--output", type=str, help="output dir", required=True)
@click.option("--reference", type=str, help="reference species", required=True)
@click.option("--chrom", type=str, help="chromosome", required=True)
@click.option("--start", type=int, help="start position", required=True)
@click.option("--end", type=int, help="end position", required=True)
@click.option("--plot", type=str, help="output image file name", required=True)
@click.argument("order", nargs=-1)
def plot_syn_pair(output, reference, chrom, start, end, plot, order):
    if not order:
        from tcbf.network_construct import get_species
        order = get_species(workdir=output)
        order.remove(reference)
        order.insert(0, reference)
    if (not plot.endswith("jpg")) and (not plot.endswith("pdf")):
        plot += ".pdf"
    plot_synteny(output, reference, chrom, start, end, order, plot)





@tcbf.command()
@click.option('-o', "--output", type=str, help="output dir", required=True)
@click.option("--reference", required=True)
@click.option("--plot", required=True)
def circos(output, reference, plot):
    plot_circos(output, reference, plot)


if __name__ == '__main__':
    tcbf()
