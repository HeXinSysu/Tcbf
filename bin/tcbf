#!/usr/bin/env python3
import click
from itertools import permutations
from tcbf.extract_TAD_bound import extract_TAD_boundary
from tcbf.process_alignment import align_genome
from tcbf.network_construct import network_construct
from tcbf.check_depend import Check_dependencies


@click.group()
def tcbf():
    Check_dependencies()


@tcbf.command()
@click.option("-c", '--config', type=click.Path(exists=True), help="Config file ", required=True)
@click.option('-o', "--output", type=str, default='.', help="输出文件的目录", required=False)
@click.option('-p', "--processor", type=int, default=0, help="进程数", required=False)
@click.option('-d', "--distance", type=int, default=100e+3, help="TAD边界范围", required=False)
@click.option("-aligner", type=click.Choice(["minimap2", "lastz", "blat", "GSAlign"]), default="minimap2",
              required=False)
@click.option("--minioverlap", type=int, default=5000)
@click.option('--only_print_command', default=False, required=False, help="只打印命令", is_flag=True)
def run(config, output, processor, distance, aligner, minioverlap,
        only_print_command):
    workdir = output
    all_species = []
    if only_print_command:
        print("### Step1")

    with open(config) as f:
        for line in f:
            genome_file, TAD_file, species_name = line.split()
            all_species.append(species_name)
            if only_print_command:
                command = f"tcbf extract-boundary -t {TAD_file} -g {genome_file} -d {distance} -p {species_name} -o" \
                          f" {workdir}"
                print(command)
            else:
                extract_TAD_boundary(tad=TAD_file,
                                     genome=genome_file,
                                     distance=distance,
                                     prefix=species_name,
                                     output=workdir,
                                     )
    print("### Step2")
    for s1, s2 in permutations(all_species, 2):
        if only_print_command:
            command = f"tcbf process-alignment -q {s1} -t {s2} -o {workdir} --threads {processor} " \
                      f"-aligner minimap2 -minioverlap {minioverlap}"
            print(command)
        else:
            align_genome(s1, s2, workdir, processor, aligner, minioverlap)

    print("### Step3")
    command3 = f"tcbf  construct-tad-network -o {workdir}"
    print(command3)


@tcbf.command()
@click.option("-t", '--TAD', type=click.Path(exists=True), help="TAD file ", required=True)
@click.option("-g", '--genome', type=click.Path(exists=True), help="genome sequence file  ", required=True)
@click.option('-d', "--distance", type=int, default=150000, required=False)
@click.option('-p', "--prefix", type=str, default=None, help="输出文件的前缀", required=True)
@click.option('-o', "--output", type=str, default='.', help="输出文件的目录", required=False)
def extract_boundary(tad: str,
                     genome: str,
                     distance: int,
                     prefix: str,
                     output: str):
    extract_TAD_boundary(tad, genome, distance, prefix, output)


@tcbf.command()
@click.option("-q", '--query', required=True)
@click.option("-t", '--target', required=True)
@click.option('-o', "--output", type=str, help="输出文件的目录", required=True)
@click.option("--threads", type=int, help="比对的线程数", required=False, default=0)
@click.option("-aligner", type=click.Choice(["minimap2", "lastz", "blat", "GSAlign"]), default="minimap2")
@click.option("-miniOverlap", type=int, default=5000)
def process_alignment(query, target, output, threads, aligner, minioverlap):
    align_genome(query, target, output, threads, aligner, minioverlap)


@tcbf.command()
@click.option('-o', "--output", type=str, help="输出文件的目录", required=True)
def construct_TAD_network(workdir):
    network_construct(workdir)


if __name__ == '__main__':
    tcbf()
